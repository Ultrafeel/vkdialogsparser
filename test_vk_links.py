#!/usr/bin/env python3
"""
Test script for VK link parsing functionality.
Tests the parse_vk_links function with various VK-style link formats.
"""

import sys
import os

# Add the modules directory to the path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'modules'))

from posts import parse_vk_links

def test_vk_link_parsing():
    """Test VK link parsing with various formats."""
    
    test_cases = [
        {
            'input': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ç—Ç—É —Å—Ç–∞—Ç—å—é: [#alias|www.example.com/russian/ve...|https://www.example.com/russian/vert-cap-40793289]',
            'expected_contains': '<a href="https://www.example.com/russian/vert-cap-40793289" target="_blank">www.example.com/russian/ve...</a>'
        },
        {
            'input': '–ù–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫: [#alias|–ü–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞|https://example1.com] –∏ [#alias|–í—Ç–æ—Ä–∞—è —Å—Å—ã–ª–∫–∞|https://example2.com]',
            'expected_contains': ['<a href="https://example1.com" target="_blank">–ü–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞</a>', 
                                '<a href="https://example2.com" target="_blank">–í—Ç–æ—Ä–∞—è —Å—Å—ã–ª–∫–∞</a>']
        },
        {
            'input': '–¢–µ–∫—Å—Ç –±–µ–∑ —Å—Å—ã–ª–æ–∫',
            'expected': '–¢–µ–∫—Å—Ç –±–µ–∑ —Å—Å—ã–ª–æ–∫'
        },
        {
            'input': '–°—Å—ã–ª–∫–∞ —Å HTML —Å–∏–º–≤–æ–ª–∞–º–∏: [#alias|<script>alert("test")</script>|https://safe-link.com]',
            'expected_contains': '<a href="https://safe-link.com" target="_blank">&lt;script&gt;alert(&quot;test&quot;)&lt;/script&gt;</a>'
        },
        {
            'input': '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: [#wrong|—Ç–µ–∫—Å—Ç|url] –Ω–µ –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è',
            'expected': '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: [#wrong|—Ç–µ–∫—Å—Ç|url] –Ω–µ –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è'
        },
        {
            'input': '',
            'expected': ''
        },
        {
            'input': None,
            'expected': None
        }
    ]
    
    print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ VK —Å—Å—ã–ª–æ–∫\n")
    
    all_passed = True
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"–¢–µ—Å—Ç {i}:")
        print(f"  –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç: {repr(test_case['input'])}")
        
        try:
            result = parse_vk_links(test_case['input'])
            print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {repr(result)}")
            
            # Check expected result
            if 'expected' in test_case:
                if result == test_case['expected']:
                    print("  ‚úÖ –ü–†–û–ô–î–ï–ù")
                else:
                    print(f"  ‚ùå –ü–†–û–í–ê–õ–ï–ù - –æ–∂–∏–¥–∞–ª–æ—Å—å: {repr(test_case['expected'])}")
                    all_passed = False
            elif 'expected_contains' in test_case:
                expected_items = test_case['expected_contains']
                if isinstance(expected_items, str):
                    expected_items = [expected_items]
                
                success = True
                for expected_item in expected_items:
                    if expected_item not in result:
                        print(f"  ‚ùå –ü–†–û–í–ê–õ–ï–ù - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {repr(expected_item)}")
                        success = False
                        all_passed = False
                
                if success:
                    print("  ‚úÖ –ü–†–û–ô–î–ï–ù")
            
        except Exception as e:
            print(f"  ‚ùå –û–®–ò–ë–ö–ê: {e}")
            all_passed = False
        
        print()
    
    if all_passed:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã.")
    
    return all_passed

def test_html_generation():
    """Test HTML generation with VK links."""
    
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML —Å VK —Å—Å—ã–ª–∫–∞–º–∏\n")
    
    # Sample post data with VK links
    sample_post = {
        'id': 12345,
        'text': '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Å—Ç–∞—Ç—å—è: [#alias|example Russian|https://www.example.com/russian/vert-cap-40793289]\n\n–ê —Ç–∞–∫–∂–µ: [#alias|–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏|https://example.com/tech]',
        'date': 1640995200,  # 2022-01-01 00:00:00
        'date_formatted': '01.01.2022 00:00:00',
        'vk_link': 'https://vk.com/wall-123_12345',
        'attachments': [],
        'likes': {'count': 10},
        'reposts': {'count': 5},
        'comments': [],
        'views': {'count': 100}
    }
    
    # Test the text processing logic
    from posts import html
    
    post_text = sample_post.get('text', '').strip()
    if post_text:
        # Apply the same processing as in save_posts_html
        processed_text = html.escape(post_text)
        processed_text = parse_vk_links(processed_text)
        processed_text = processed_text.replace('\n', '<br>')
        
        print("–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:")
        print(f"  {repr(sample_post['text'])}")
        print()
        print("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π HTML:")
        print(f"  {processed_text}")
        print()
        
        # Check if links are properly converted
        if '<a href="https://www.example.com/russian/vert-cap-40793289" target="_blank">example Russian</a>' in processed_text:
            print("‚úÖ –ü–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ùå –ü–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        if '<a href="https://example.com/tech" target="_blank">–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</a>' in processed_text:
            print("‚úÖ –í—Ç–æ—Ä–∞—è —Å—Å—ã–ª–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ùå –í—Ç–æ—Ä–∞—è —Å—Å—ã–ª–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        if '<br>' in processed_text:
            print("‚úÖ –ü–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ùå –ü–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

if __name__ == '__main__':
    print("=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò –ü–ê–†–°–ò–ù–ì–ê VK –°–°–´–õ–û–ö")
    print("=" * 60)
    print()
    
    # Test the parsing function
    parsing_success = test_vk_link_parsing()
    
    print("-" * 60)
    
    # Test HTML generation
    test_html_generation()
    
    print()
    print("=" * 60)
    if parsing_success:
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û")
    else:
        print("‚ö†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò")
    print("=" * 60)
